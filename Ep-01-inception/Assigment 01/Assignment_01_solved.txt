1) What is Emmet?
-> Emmet is a powerful toolkit for web developers and front-end designers that greatly enhances HTML and CSS workflow by enabling faster and more efficient coding. Originally known as Zen         Coding, Emmet provides shortcuts and abbreviations to quickly generate HTML and CSS code with minimal keystrokes.

2) Difference between a Library and Framework?
-> Libraries and frameworks are both tools that aid in software development, but they serve different purposes and have distinct characteristics:

   Library:

   . A library is a collection of reusable code modules or functions that can be directly called by an application to perform specific tasks or operations.
   . Libraries typically focus on providing specific functionalities or capabilities, such as data manipulation, networking, user interface components, etc.
   . When using a library, the developer retains control over the flow of the application and decides when and how to use the library's functions.
   . Libraries are often designed to be flexible and allow developers to pick and choose the specific components they need for their application.
   . Examples of libraries include jQuery (for DOM manipulation), NumPy (for numerical computing in Python), and React (for building user interfaces in JavaScript).


   Framework:

    . A framework is a pre-defined, structured set of code that provides a foundation for building applications. It typically includes a combination of libraries, tools, and best practices 	for a specific type of application (e.g., web applications, mobile apps).
    . Frameworks often impose a specific architecture or design pattern (such as MVC - Model View Controller) and dictate the flow of control within the application.
    . Developers build their applications by extending or customizing the framework's components and following its conventions.
    . Frameworks usually provide a scaffolding or skeleton for the application, handling common tasks such as routing, database interaction, authentication, etc.
    . Examples of frameworks include Django (for web development in Python), Angular (for building web applications in JavaScript), and Flask (for web development in Python).

3) What is CDN? Why do we use it?
-> CDN stands for Content Delivery Network. It is a distributed network of servers located in multiple data centers across various geographical locations. The primary purpose of a CDN is to deliver web content to users more efficiently and reliably. Here's why we use CDNs:

   . Improved Performance: CDNs cache static content, such as images, CSS files, JavaScript files, and other media assets, on servers located closer to the user's geographic location. When 	a user requests content, the CDN delivers it from the nearest server rather than the origin server where the content is hosted. This reduces latency and improves load times, 	resulting in a faster and more responsive browsing experience for users.

   . Scalability: CDNs distribute traffic across multiple servers, allowing them to handle large volumes of simultaneous requests more effectively. This helps prevent website slowdowns or 	downtime during periods of high traffic, such as during promotional events, product launches, or viral content.

   . Reliability: By distributing content across multiple servers and data centers, CDNs enhance the reliability and availability of web content. If one server or data center experiences 	issues or downtime, the CDN can automatically reroute traffic to alternative servers, ensuring uninterrupted access to the content.

   . Global Reach: CDNs have servers located in various regions around the world, enabling them to deliver content to users globally with minimal latency. This is particularly beneficial 	for websites serving a global audience, as it ensures consistent performance and user experience regardless of the user's location.

   . Security: Many CDNs offer security features such as DDoS protection, Web Application Firewall (WAF), SSL/TLS encryption, and content optimization to help protect websites from cyber 	attacks, data breaches, and other security threats.

4) Why is React known as React?
-> React, the JavaScript library for building user interfaces, is known as "React" because of its core concept of reactive programming.

  The term "reactive programming" refers to a programming paradigm focused on reacting to changes in data rather than imperatively changing the state of the application. In React, the user 	interface is represented as a tree of components, and when the underlying data changes, React efficiently updates the UI to reflect those changes.

   The name "React" reflects the library's approach to building user interfaces by reacting to changes in data and efficiently updating the UI accordingly. Additionally, the term "React" 	conveys the idea of reacting quickly and responsively to user interactions and changes in the application state, which aligns with the library's goal of providing a high-	performance and interactive user experience.

5) What is crossorigin in script tag of React CDN link?
-> The crossorigin attribute in a <script> tag is used to specify how the browser should handle requests made to load the script file when it's fetched from a different origin (i.e., 	domain, subdomain, or protocol) than the current page.

   When you include a script from a different origin, the browser may enforce the Same-Origin Policy, which restricts scripts from accessing resources (such as data or cookies) from   	different origins for security reasons. The crossorigin attribute allows you to control whether the browser should enforce CORS (Cross-Origin Resource Sharing) restrictions when 	fetching the script.

   In the context of using a React CDN link, if you're loading the React library from a different origin than your website, you might need to specify the crossorigin attribute to ensure 	that the browser handles the request properly and adheres to CORS policies.

6) What is diference between React and ReactDOM
-> The two links provided for React and ReactDOM refer to different entry points in the React library for different environments:

 a) React CDN Link (react.development.js):

	. This link provides the development build of the React library. It includes extra debugging information and warnings to aid in development.	
	. It's typically used during development to build and test React applications.
	. This version of React does not include any rendering logic specific to the DOM (Document Object Model) or any particular environment.

 b) ReactDOM CDN Link (react-dom.development.js):

	. This link provides the development build of the ReactDOM library, which is specifically tailored for rendering React components into the DOM.
	. ReactDOM is responsible for rendering React components into the browser DOM, handling updates to the DOM in response to changes in component state or props, and managing event 	  handling within the DOM.
	. It works in conjunction with the React library, which provides the core functionality for defining and managing React components.

7) What is difference between react.development.js and react.production.js files via CDN?
->  react.development.js and react.production.js files provide the core functionality of the React library, they are optimized for different purposes: the development build    	(react.development.js) prioritizes developer experience and debugging tools, while the production build (react.production.js) prioritizes performance and minimized file size for 	deployment in production environments.